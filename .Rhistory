tab <- if (type == "artif") {
ReadArtif(obj)
} else {
read.csv(paste0("data/real/collections/",collection,'.csv')) %>% filter(ISO_language==obj)
}
# fixed variables
d_seq <- tab$d
d_vals <- sort(unique(d_seq))
freq_d <- table(d_seq)
M <- sum(freq_d*d_vals)
N <- length(d_seq)
dstar_vals <- d_vals[2:(length(d_vals)-1)]
dmax_vals  <- seq(max(d_vals),max(d_vals)+10)
# initial values
q_init <- 1/mean(d_seq)
gamma_init <- 1 + N/sum(log(d_seq/min(d_seq)))
# Model 3
MS_model3 <- function(d_vals,freq_d,N,M,dstar_vals) {
# TEST
eps_3 <- 10^-3
eps_8 <- 10^-8
mle_3_ls <- lapply(dstar_vals,function(dstar) {
# initial values
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<eps_8,eps_8,q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
m2logL <- attributes(summary(mle_3))$m2logL
pars   <- lapply(1:2,function(n) attributes(summary(mle_3))$coef[n]) %>% unlist()
list(m2logL=m2logL, pars=pars)
})
m2logLiks        <- sapply(mle_3_ls,"[[",1)
mle_3            <- mle_3_ls[[which.min(m2logLiks)]]
mle_3$pars       <- append(mle_3$pars,dstar_vals[[which.min(m2logLiks)]])
mle_3$pars_names <- c("3:q1","3:q2","3:dstar")
return(mle_3)
}
mle_3     <- tryCatch( { MS_model3(d_vals,freq_d,N,M,dstar_vals)
}, error=function(e) {
print("warning while fitting model 3 ...")
message (e)
MS_model3(d_vals,freq_d,N,M,dstar_vals)
})
mle_4     <- tryCatch( { MS_model4(d_vals,freq_d,N,M,dstar_vals,dmax_vals)
}, error=function(e) {
print("while fitting model 4 ...")
message (e)
MS_model4(d_vals,freq_d,N,M,dstar_vals,dmax_vals)
})
epsilon_q
# Model 3
MS_model3 <- function(d_vals,freq_d,N,M,dstar_vals) {
# TEST
eps_3 <- 10^-3
eps_8 <- 10^-8
mle_3_ls <- lapply(dstar_vals,function(dstar) {
# initial values
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<=eps_8,eps_8,q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
m2logL <- attributes(summary(mle_3))$m2logL
pars   <- lapply(1:2,function(n) attributes(summary(mle_3))$coef[n]) %>% unlist()
list(m2logL=m2logL, pars=pars)
})
m2logLiks        <- sapply(mle_3_ls,"[[",1)
mle_3            <- mle_3_ls[[which.min(m2logLiks)]]
mle_3$pars       <- append(mle_3$pars,dstar_vals[[which.min(m2logLiks)]])
mle_3$pars_names <- c("3:q1","3:q2","3:dstar")
return(mle_3)
}
mle_3     <- tryCatch( { MS_model3(d_vals,freq_d,N,M,dstar_vals)
}, error=function(e) {
print("warning while fitting model 3 ...")
message (e)
MS_model3(d_vals,freq_d,N,M,dstar_vals)
})
mle_4     <- tryCatch( { MS_model4(d_vals,freq_d,N,M,dstar_vals,dmax_vals)
}, error=function(e) {
print("while fitting model 4 ...")
message (e)
MS_model4(d_vals,freq_d,N,M,dstar_vals,dmax_vals)
})
# initial values
dstar <- 43
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<=eps_8,eps_8,q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
# TEST
eps_3 <- 10^-3
eps_8 <- 10^-8
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
# initial values
dstar <- 41
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<=eps_8,eps_8,q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
# initial values
dstar <- 44
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<=eps_8,eps_8,q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
# initial values
dstar <- 45
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<=eps_8,eps_8,q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
max(tab$d)
onj <- '4'
obj <- '4'
tab <- if (type == "artif") {
ReadArtif(obj)
} else {
read.csv(paste0("data/real/collections/",collection,'.csv')) %>% filter(ISO_language==obj)
}
# fixed variables
d_seq <- tab$d
d_vals <- sort(unique(d_seq))
freq_d <- table(d_seq)
M <- sum(freq_d*d_vals)
N <- length(d_seq)
dstar_vals <- d_vals[2:(length(d_vals)-1)]
dmax_vals  <- seq(max(d_vals),max(d_vals)+10)
# initial values
q_init <- 1/mean(d_seq)
gamma_init <- 1 + N/sum(log(d_seq/min(d_seq)))
mle_0     <- tryCatch( { MS_model0(tab,d_vals,freq_d)
}, error=function(e) {
print("while fitting model 0 ...")
message (e);NULL})
mle_3     <- tryCatch( { MS_model3(d_vals,freq_d,N,M,dstar_vals)
}, error=function(e) {
print("warning while fitting model 3 ...")
message (e)
MS_model3(d_vals,freq_d,N,M,dstar_vals)
})
mle_4     <- tryCatch( { MS_model4(d_vals,freq_d,N,M,dstar_vals,dmax_vals)
}, error=function(e) {
print("while fitting model 4 ...")
message (e)
MS_model4(d_vals,freq_d,N,M,dstar_vals,dmax_vals)
})
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/FIB/Thesis/DistributionOfDependencyDistances")
source("aux_functions.R")
obj <- '3'
type <- 'artif'
tab <- if (type == "artif") {
ReadArtif(obj)
} else {
read.csv(paste0("data/real/collections/",collection,'.csv')) %>% filter(ISO_language==obj)
}
# fixed variables
d_seq <- tab$d
d_vals <- sort(unique(d_seq))
freq_d <- table(d_seq)
M <- sum(freq_d*d_vals)
N <- length(d_seq)
dstar_vals <- d_vals[2:(length(d_vals)-1)]
dmax_vals  <- seq(max(d_vals),max(d_vals)+10)
# initial values
q_init <- 1/mean(d_seq)
gamma_init <- 1 + N/sum(log(d_seq/min(d_seq)))
# TEST
eps_3 <- 10^-3
eps_8 <- 10^-8
mle_3_ls <- lapply(dstar_vals,function(dstar) {
# initial values
dstar <- 45
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<=eps_8,eps_8,q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
m2logL <- attributes(summary(mle_3))$m2logL
pars   <- lapply(1:2,function(n) attributes(summary(mle_3))$coef[n]) %>% unlist()
list(m2logL=m2logL, pars=pars)
})
mle_4     <- tryCatch( { MS_model4(d_vals,freq_d,N,M,dstar_vals,dmax_vals)
}, error=function(e) {
print("while fitting model 4 ...")
message (e)
MS_model4(d_vals,freq_d,N,M,dstar_vals,dmax_vals)
})
mle_3_ls <- lapply(dstar_vals,function(dstar) {
# initial values
dstar <- 45
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<=eps_8,eps_8,q2_init)
print(q1_init)
print(q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
m2logL <- attributes(summary(mle_3))$m2logL
pars   <- lapply(1:2,function(n) attributes(summary(mle_3))$coef[n]) %>% unlist()
list(m2logL=m2logL, pars=pars)
})
obj
# TEST
eps_3 <- 10^-3
eps_8 <- 10^-8
mle_3_ls <- lapply(dstar_vals,function(dstar) {
# initial values
dstar <- 45
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<=eps_8,eps_8,q2_init)
print(q1_init)
print(q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
m2logL <- attributes(summary(mle_3))$m2logL
pars   <- lapply(1:2,function(n) attributes(summary(mle_3))$coef[n]) %>% unlist()
list(m2logL=m2logL, pars=pars)
})
mle_3_ls <- lapply(dstar_vals,function(dstar) {
# initial values
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<=eps_8,eps_8,q2_init)
print(q1_init)
print(q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
m2logL <- attributes(summary(mle_3))$m2logL
pars   <- lapply(1:2,function(n) attributes(summary(mle_3))$coef[n]) %>% unlist()
list(m2logL=m2logL, pars=pars)
})
