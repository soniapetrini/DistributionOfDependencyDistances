upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
# initial values
dstar <- 41
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<=eps_8,eps_8,q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
# initial values
dstar <- 44
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<=eps_8,eps_8,q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
# initial values
dstar <- 45
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<=eps_8,eps_8,q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
max(tab$d)
onj <- '4'
obj <- '4'
tab <- if (type == "artif") {
ReadArtif(obj)
} else {
read.csv(paste0("data/real/collections/",collection,'.csv')) %>% filter(ISO_language==obj)
}
# fixed variables
d_seq <- tab$d
d_vals <- sort(unique(d_seq))
freq_d <- table(d_seq)
M <- sum(freq_d*d_vals)
N <- length(d_seq)
dstar_vals <- d_vals[2:(length(d_vals)-1)]
dmax_vals  <- seq(max(d_vals),max(d_vals)+10)
# initial values
q_init <- 1/mean(d_seq)
gamma_init <- 1 + N/sum(log(d_seq/min(d_seq)))
mle_0     <- tryCatch( { MS_model0(tab,d_vals,freq_d)
}, error=function(e) {
print("while fitting model 0 ...")
message (e);NULL})
mle_3     <- tryCatch( { MS_model3(d_vals,freq_d,N,M,dstar_vals)
}, error=function(e) {
print("warning while fitting model 3 ...")
message (e)
MS_model3(d_vals,freq_d,N,M,dstar_vals)
})
mle_4     <- tryCatch( { MS_model4(d_vals,freq_d,N,M,dstar_vals,dmax_vals)
}, error=function(e) {
print("while fitting model 4 ...")
message (e)
MS_model4(d_vals,freq_d,N,M,dstar_vals,dmax_vals)
})
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/FIB/Thesis/DistributionOfDependencyDistances")
source("aux_functions.R")
obj <- '3'
type <- 'artif'
tab <- if (type == "artif") {
ReadArtif(obj)
} else {
read.csv(paste0("data/real/collections/",collection,'.csv')) %>% filter(ISO_language==obj)
}
# fixed variables
d_seq <- tab$d
d_vals <- sort(unique(d_seq))
freq_d <- table(d_seq)
M <- sum(freq_d*d_vals)
N <- length(d_seq)
dstar_vals <- d_vals[2:(length(d_vals)-1)]
dmax_vals  <- seq(max(d_vals),max(d_vals)+10)
# initial values
q_init <- 1/mean(d_seq)
gamma_init <- 1 + N/sum(log(d_seq/min(d_seq)))
# TEST
eps_3 <- 10^-3
eps_8 <- 10^-8
mle_3_ls <- lapply(dstar_vals,function(dstar) {
# initial values
dstar <- 45
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<=eps_8,eps_8,q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
m2logL <- attributes(summary(mle_3))$m2logL
pars   <- lapply(1:2,function(n) attributes(summary(mle_3))$coef[n]) %>% unlist()
list(m2logL=m2logL, pars=pars)
})
mle_4     <- tryCatch( { MS_model4(d_vals,freq_d,N,M,dstar_vals,dmax_vals)
}, error=function(e) {
print("while fitting model 4 ...")
message (e)
MS_model4(d_vals,freq_d,N,M,dstar_vals,dmax_vals)
})
mle_3_ls <- lapply(dstar_vals,function(dstar) {
# initial values
dstar <- 45
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<=eps_8,eps_8,q2_init)
print(q1_init)
print(q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
m2logL <- attributes(summary(mle_3))$m2logL
pars   <- lapply(1:2,function(n) attributes(summary(mle_3))$coef[n]) %>% unlist()
list(m2logL=m2logL, pars=pars)
})
obj
# TEST
eps_3 <- 10^-3
eps_8 <- 10^-8
mle_3_ls <- lapply(dstar_vals,function(dstar) {
# initial values
dstar <- 45
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<=eps_8,eps_8,q2_init)
print(q1_init)
print(q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
m2logL <- attributes(summary(mle_3))$m2logL
pars   <- lapply(1:2,function(n) attributes(summary(mle_3))$coef[n]) %>% unlist()
list(m2logL=m2logL, pars=pars)
})
mle_3_ls <- lapply(dstar_vals,function(dstar) {
# initial values
print(dstar)
rel_freq <- freq_d/N
df <- cbind(p=unname(rel_freq), d=d_vals) %>% data.frame()
lm1 <- lm(log(p) ~ d, data=df[df$d<=dstar,])
q1_init <- 1-exp(lm1$coefficients[2])
thresh2 <- ifelse(dstar %in% d_vals,dstar,max(d_vals[d_vals < dstar]))
lm2 <- lm(log(p) ~ d, data=df[df$d>=thresh2,])
q2_init <- 1-exp(lm2$coefficients[2])
q2_init <- ifelse(q2_init<=eps_8,eps_8,q2_init)
print(q1_init)
print(q2_init)
mloglik_3 <- function(q1,q2) {
c1 <- c1_model3(q1,q2,dstar)
c2 <- c2_fun(c1,q1,q2,dstar)
Mstar <- M_star(d_vals,freq_d,dstar)
Nstar <- N_star(d_vals,freq_d,dstar)
- ( Nstar*log(c1) + (N-Nstar)*log(c2) + (Mstar - Nstar)*log((1-q1)/(1-q2)) + (M - N)*log(1-q2) )
}
mle_3 <- tryCatch( {
mle(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, error=function(e) {
message(e)
print("trying mle2")
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
}, warning=function(e) {
mle2(mloglik_3, start = list(q1 = q1_init, q2 = q2_init),method = "L-BFGS-B",
lower = list(q1 = eps_8, q2 = eps_8),
upper = list(q1 = 1-eps_8, q2 = 1-eps_3))
})
m2logL <- attributes(summary(mle_3))$m2logL
pars   <- lapply(1:2,function(n) attributes(summary(mle_3))$coef[n]) %>% unlist()
list(m2logL=m2logL, pars=pars)
})
assign_chunks <- function(heads,type) {
n <- length(heads)
chunk_names <- 1:n
positions <- 1:n
if (type=="makutec") {
# are linear neighbors also dependency neighbors ?
for (position in 2:n) {
# is word in same chunk as previous word?
if (heads[position] == position-1 | position == heads[position-1]) {
# - yes: assign same to chunk
chunk_names[position] = chunk_names[position-1]
} else {
# - no: assign to following chunk
chunk_names[position] <- chunk_names[position-1] + 1
}
}
} else if (type=="anderson") {
for (position in 1:(n-1)) {
# is word in lin-dep relation with previous word, or they share the head?
if (position == heads[position+1] | heads[position] == position+1 | heads[position] == heads[position+1]) {.  # $$ yes
# check the surroundings
if (any(position == heads[position+1] & any(positions[chunk_names==chunk_names[position]]==heads[position]),  #
heads[position] == position+1 & any(heads[chunk_names==chunk_names[position]]==position),  #
heads[position] == heads[position+1] &
# have we already seen the common head?
if (heads[position] < position) {   # ++ yes
chunk_names[heads[position]] != chunk_names[position]  # is it in a different chunk?
} else {   # ++ no
any(heads[chunk_names==chunk_names[position]]==position) |  # is the word already in a dependency?
any(sapply(position:(heads[position]-1), function(j) heads[j]!=heads[position])) # is there any non sibling word between them and their head?
})) {
# %% yes: assign new chunk
chunk_names[position+1] <-  chunk_names[position] + 1
} else {
# %% no: assign to same chunk
chunk_names[position+1] = chunk_names[position]
}
} else {
# $$ no: assign to new chunk
chunk_names[position+1] <-  chunk_names[position] + 1
}
}
} else {
print("invalid chunking type, must be in 'makutec', 'anderson'")
chunk_names = NULL}
return(chunk_names)
}
assign_chunks(c(2,5,2,5,0,9,9,9,10,5))
assign_chunks(c(2,5,2,5,0,9,9,9,10,5),'anderson')
assign_chunks(c(2,5,2,5,0,9,9,9,10,5),'anderson')
assign_chunks <- function(heads,type) {
n <- length(heads)
chunk_names <- 1:n
positions <- 1:n
if (type=="makutec") {
# are linear neighbors also dependency neighbors ?
for (position in 2:n) {
# is word in same chunk as previous word?
if (heads[position] == position-1 | position == heads[position-1]) {
# - yes: assign same to chunk
chunk_names[position] = chunk_names[position-1]
} else {
# - no: assign to following chunk
chunk_names[position] <- chunk_names[position-1] + 1
}
}
} else if (type=="anderson") {
for (position in 1:(n-1)) {
# is word in lin-dep relation with previous word, or they share the head?
if (position == heads[position+1] | heads[position] == position+1 | heads[position] == heads[position+1]) {  # $$ yes
# check the surroundings
if (any(position == heads[position+1] & any(positions[chunk_names==chunk_names[position]]==heads[position]),  #
heads[position] == position+1 & any(heads[chunk_names==chunk_names[position]]==position),  #
heads[position] == heads[position+1] &
# have we already seen the common head?
if (heads[position] < position) {   # ++ yes
chunk_names[heads[position]] != chunk_names[position]  # is it in a different chunk?
} else {   # ++ no
any(heads[chunk_names==chunk_names[position]]==position) |  # is the word already in a dependency?
any(sapply(position:(heads[position]-1), function(j) heads[j]!=heads[position])) # is there any non sibling word between them and their head?
})) {
# %% yes: assign new chunk
chunk_names[position+1] <-  chunk_names[position] + 1
} else {
# %% no: assign to same chunk
chunk_names[position+1] = chunk_names[position]
}
} else {
# $$ no: assign to new chunk
chunk_names[position+1] <-  chunk_names[position] + 1
}
}
} else {
print("invalid chunking type, must be in 'makutec', 'anderson'")
chunk_names = NULL}
return(chunk_names)
}
assign_chunks(c(2,5,2,5,0,9,9,9,10,5),'anderson')
# example
head_vector <- c(2,5,2,5,0,9,9,9,10,5)
assign_chunks(head_vector,'anderson')
setwd("/Users/sonia/Library/Mobile Documents/com~apple~CloudDocs/FIB/Thesis/DistributionOfDependencyDistances")
source("aux_functions.R")
args <- 'words'
suffix <- ifelse(args[[1]]=="words","",paste("_",args[[1]],sep=""))
print('suffix created')
collection <- 'PSUD'
## parameters
tab <- read.csv(paste0("data/real/collections/",collection,".csv")) %>%
group_by(ISO_language) %>% summarise(max_n = max(sent_n),max_d = max(d))
latex_params <- merge(tab,real_params1,by='ISO_language') %>% mutate(ISO_language=langs_map[ISO_language])
real_df1     <- read.csv('results/real/mixed_n/ms_results.csv',check.names = F) %>% filter(coll==collection)
real_ICdiff1 <- DfICdiff(real_df1,'real')
real_params1 <- Dfparams(real_df1) %>% dplyr::select(-`0.dmax`,-coll,-best)
latex_params <- merge(tab,real_params1,by='ISO_language') %>% mutate(ISO_language=langs_map[ISO_language])
latex_params[c(grep("dstar",colnames(latex_params)),grep("dmax",colnames(latex_params)))] <- unlist(latex_params[c(grep("dstar",colnames(latex_params)),grep("dmax",colnames(latex_params)))]) %>%
as.integer()
xt1 <- xtable(latex_params,type = "latex", digits=3)
colnames(xt1) <- c( "language", "$max(d)$", "$max(n)$", "$q$", "$q$", "$d_{max}$" , "$q_1$",
"$q_2$", "$d^*$", "$q_1$", "$q_2$","$d^*$", "$d_{max}$",
"$d_{max}$", "$\\gamma$","$\\gamma$","$q$","$d^*$","$\\gamma$","$q$","$d^*$","$d_{max}$")
xt1
paste0(real_path,collection,"_params.tex")
real_path <- "latex_outputs/real/"
print(xt1,file = paste0(real_path,collection,"_params.tex"),
include.rownames=FALSE, only.contents = TRUE,sanitize.text.function = function(x) {x})
source("aux_functions.R")
args <- list('words')
suffix <- ifelse(args[[1]]=="words","",paste("_",args[[1]],sep=""))
print('suffix created')
#-------------------------------------------------------------------------------
# ------------------------ ◊ REAL LANGUAGES ◊ ----------------------------------
print('begin real')
real_path <- "latex_outputs/real/"
collection <- 'PUD'
real_df1     <- read.csv('results/real/mixed_n/ms_results.csv',check.names = F) %>% filter(coll==collection)
real_ICdiff1 <- DfICdiff(real_df1,'real')
real_params1 <- Dfparams(real_df1) %>% dplyr::select(-`0.dmax`,-coll,-best)
## AIC
latexaic <- real_df1[1:length(artif_models)] %>% `colnames<-`(c(paste("Model",artif_models))) %>% mutate(language=LANGS)
latexaic <- latexaic[,c(ncol(latexaic),1:length(artif_models))]   # reorder
latexaic
xtable(latexaic, label=paste0("tab:",collection,"_AIC_scores"),type = "latex",digits=0)
print(xtable(latexaic, label=paste0("tab:",collection,"_AIC_scores"),type = "latex",digits=0),
file = paste0(real_path,collection,"_AIC_scores.tex"), only.contents=T,
include.colnames=FALSE,include.rownames=FALSE,hline.after = NULL)
## model selection -------------------------------------------------------------
list <- lapply(COLLS, function(collection) {
real_df1     <- read.csv('results/real/mixed_n/ms_results.csv',check.names = F) %>% filter(coll==collection)
real_ICdiff1 <- DfICdiff(real_df1,'real')
real_params1 <- Dfparams(real_df1) %>% dplyr::select(-`0.dmax`,-coll,-best)
## AIC
latexaic <- real_df1[1:length(artif_models)] %>% `colnames<-`(c(paste("Model",artif_models))) %>% mutate(language=LANGS)
latexaic <- latexaic[,c(ncol(latexaic),1:length(artif_models))]   # reorder
print(xtable(latexaic, label=paste0("tab:",collection,"_AIC_scores"),type = "latex",digits=0),
file = paste0(real_path,collection,"_AIC_scores.tex"), only.contents=T,
include.colnames=FALSE,include.rownames=FALSE,hline.after = NULL)
## AIC diff
latexaic_diff <- mutate(real_ICdiff1,best=NULL) %>% `colnames<-`(c(paste("Model",artif_models),"language"))
latexaic_diff <- latexaic_diff[,c(ncol(latexaic_diff),1:length(artif_models))]    # reorder
print(xtable(latexaic_diff, label=paste0("tab:",collection,"_AIC_diff"),type = "latex"),
file = paste0(real_path,collection,"_AIC_diff.tex"), only.contents=T,
include.colnames=FALSE,include.rownames=FALSE,hline.after = NULL)
## parameters
tab <- read.csv(paste0("data/real/collections/",collection,".csv")) %>%
group_by(ISO_language) %>% summarise(max_n = max(sent_n),max_d = max(d))
latex_params <- merge(tab,real_params1,by='ISO_language') %>% mutate(ISO_language=langs_map[ISO_language])
latex_params[c(grep("dstar",colnames(latex_params)),grep("dmax",colnames(latex_params)))] <- unlist(latex_params[c(grep("dstar",colnames(latex_params)),grep("dmax",colnames(latex_params)))]) %>%
as.integer()
xt1 <- xtable(latex_params,type = "latex", digits=3)
colnames(xt1) <- c( "language", "$max(d)$", "$max(n)$", "$q$", "$q$", "$d_{max}$" , "$q_1$",
"$q_2$", "$d^*$", "$q_1$", "$q_2$","$d^*$", "$d_{max}$",
"$d_{max}$", "$\\gamma$","$\\gamma$","$q$","$d^*$","$\\gamma$","$q$","$d^*$","$d_{max}$")
print(xt1,file = paste0(real_path,collection,"_params.tex"),
include.rownames=FALSE, only.contents = TRUE,sanitize.text.function = function(x) {x})
})
